<!-- 
    * TIME MANAGEMENT APPLICATION
    * 
    * Done By: Greg Postings 19002634
    * Class: BCA2 G1
    * Module: PROG 2B
    *
    * POE TASK 1
    * Start Date and Time: 8 August 2021 at 14:25
    * End Date and Time: 20 September 2021 at 15:35
    * 
    * POE TASK 2
    * Start Date and Time: 5 OCtober 2021 at 16:25
    * End Date and Time: 26 OCtober 2021 at 13:50
    -->

<!--
<a target="_blank" href="https://icons8.com/icon/84020/user">User</a> icon by
<a target="_blank" href="https://icons8.com">Icons8</a>
    
    https://icons8.com/icon/set/password/material
-->

<!-- 
PROG IDEAS
REMINDERS, TO DO LIST, TRACK TIME/ USAGE,
MINI DUE DATES/ GOALS, DAY BY DAY CALENDER
-->

<Window x:Class="GregPostings19002634PROG2BPOE_Task1.WindowMaster"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:GregPostings19002634PROG2BPOE_Task1"
        xmlns:viewModel="clr-namespace:GregPostings19002634PROG2BPOE_Task1.UserControls.Classes"
        mc:Ignorable="d"
        Title="Home / Dashboard" Height="700" Width="850" Icon="Icons/PROG2BLogoTest2.png" MinWidth="750" MinHeight="600" WindowStartupLocation="CenterScreen">

    <!-- These are all the different styles for things-->

    <Window.Resources>

        <!-- #region Window Resources / Styles -->
        
        <!-- Toggle Button Image change -->
        <ImageBrush x:Key="tb_mouse_over" ImageSource="D:\BCAD2\Semester 2\PROG 2B\POE\Task 1\GregPostings19002634PROG2BPOE_Task1\GregPostings19002634PROG2BPOE_Task1\Icons\HamburgerMenu.png"></ImageBrush>

        <!-- Text Effect Style -->

        <!-- #region Text Effect1 -->
        <Style x:Key="font_Style" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="Fonts/Roboto-Light.ttf #Roboto"/>

            <Setter Property="VerticalAlignment" Value="Center"/>

            <Setter Property="HorizontalAlignment" Value="Left"/>

            <Setter Property="Foreground" Value="White"/>

            <Setter Property="FontSize" Value="20"/>
        </Style>
        <!--#endregion-->

        <!-- Tooltip Style -->

        <!--#region Tool Tip -->
        <Style TargetType="ToolTip" x:Key="tt_Style">
            <Setter Property="Placement" Value="Right"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="Margin" Value="20, 0, 0, 0"/>
            <Setter Property="Background" Value="#4A5668"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontFamily" Value="Fonts/Roboto-Light.ttf #Roboto"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="PlacementRectangle" Value="60, 0, 0, 0"/>
            <Setter Property="HorizontalOffset" Value="15"/>
            <Setter Property="VerticalOffset" Value="6"/>
            <Setter Property="HasDropShadow" Value="True"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
        <!-- #endregion -->

        <!-- Toggle Button Style -->

        <!-- #region Hamburger Menu -->
        <Style x:Key="tb_style" TargetType="{x:Type ToggleButton}">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">

                                <Setter Property="Background" TargetName="border" Value="{StaticResource tb_mouse_over}"/>

                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource tb_mouse_over}"/>

                            </Trigger>

                            <Trigger Property="IsChecked" Value="True">

                                <Setter Property="Background" TargetName="border" Value="{StaticResource tb_mouse_over}"/>

                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource tb_mouse_over}"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- #endregion -->

        <!-- Menu Items Style -->

        <!--#region Autogenerated Style For Menu Items -->
        <SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="#FF6747F9"/>
        <SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="#FF6747F9"/>
        <SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="#FF707070"/>
        <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Background" Color="#0A000000"/>
        <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Border" Color="#21000000"/>
        <SolidColorBrush x:Key="MenuItem.Selected.Border" Color="#FF26A0DA"/>
        <SolidColorBrush x:Key="MenuItem.Selected.Background" Color="#3D26A0DA"/>
        <Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>

        <!-- Text colour -->
        <SolidColorBrush x:Key="Menu.Static.Foreground" Color="#FFFFFFFF"/>

        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="22" SnapsToDevicePixels="true">
                <Grid Margin="-1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                        <ColumnDefinition Width="13"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                        <ColumnDefinition Width="20"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                    <Border x:Name="GlyphPanel" BorderBrush="{StaticResource MenuItem.Selected.Border}" BorderThickness="1" Background="{StaticResource MenuItem.Selected.Background}" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
                        <Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="{StaticResource Menu.Static.Foreground}" FlowDirection="LeftToRight" Height="11" Width="10"/>
                    </Border>
                    <ContentPresenter x:Name="menuHeaderContainer" Grid.Column="2" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                    <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsHighlighted" Value="True"/>
                        <Condition Property="IsEnabled" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Colour of the main things -->
        <SolidColorBrush x:Key="Menu.Static.Border" Color="#FF3C4FA6"/>
        <SolidColorBrush x:Key="Menu.Static.Background" Color="#FF3C4FA6"/>
        <SolidColorBrush x:Key="Menu.Static.Separator" Color="#FFD7D7D7"/>

        <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
        <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
            <Setter Property="ClickMode" Value="Hover"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="templateRoot" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="Center" Margin="6" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
        <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
        <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
            <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
            <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Border Grid.Column="0" Grid.Row="1">
                                <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
                            </Border>
                            <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
                                <RepeatButton.Visibility>
                                    <MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                        <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </RepeatButton.Visibility>
                                <Path Data="{StaticResource UpArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
                            </RepeatButton>
                            <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
                                <RepeatButton.Visibility>
                                    <MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                        <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </RepeatButton.Visibility>
                                <Path Data="{StaticResource DownArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
                            </RepeatButton>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                <Grid VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                    <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
                    <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}">
                        <Border x:Name="SubMenuBorder" BorderBrush="{StaticResource Menu.Static.Border}" BorderThickness="1" Background="{StaticResource Menu.Static.Background}" Padding="2">
                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                    </Canvas>
                                    <Rectangle Fill="{StaticResource Menu.Static.Separator}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                    <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
                </Trigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                <Grid VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                    <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{StaticResource Menu.Static.Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
                    <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                    <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsHighlighted" Value="True"/>
                        <Condition Property="IsEnabled" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="22" SnapsToDevicePixels="true">
                <Grid Margin="-1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                        <ColumnDefinition Width="13"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                        <ColumnDefinition Width="20"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                    <Border x:Name="GlyphPanel" BorderBrush="{StaticResource MenuItem.Highlight.Border}" BorderThickness="1" Background="{StaticResource MenuItem.Highlight.Background}" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
                        <Path x:Name="Glyph" Data="{DynamicResource Checkmark}" Fill="{StaticResource Menu.Static.Foreground}" FlowDirection="LeftToRight" Height="11" Width="9"/>
                    </Border>
                    <ContentPresenter Grid.Column="2" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                    <Path x:Name="RightArrow" Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{StaticResource Menu.Static.Foreground}" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
                        <Border x:Name="SubMenuBorder" BorderBrush="{StaticResource Menu.Static.Border}" BorderThickness="1" Background="{StaticResource Menu.Static.Background}" Padding="2">
                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                    </Canvas>
                                    <Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="Transparent"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                    <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
                    <Setter Property="Fill" TargetName="RightArrow" Value="{StaticResource Menu.Disabled.Foreground}"/>
                </Trigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="MenuItemStyle1" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}"/>
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                    <Setter Property="Padding" Value="6,0"/>
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Background" Value="{StaticResource Menu.Static.Background}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Menu.Static.Border}"/>
                    <Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}"/>
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                    <Setter Property="Padding" Value="6,0"/>
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- #endregion -->

        
        <!-- SideNav Buttons -->
        <!-- #region SideNav Button Hover Effects -->
        
        <!-- Home Image -->
        <!-- #region Home Button Hover Effect -->
        <ImageBrush x:Key="home_iconHov" ImageSource="Icons\Home.png" Stretch="Fill"/>

        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

        <Style x:Key="HomeBtnHover" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource home_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource home_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- #endregion -->

        <!-- Profile Image -->
        <!-- #region Profile Button Hover Effect -->
        <ImageBrush x:Key="profile_iconHov" ImageSource="Icons\Profile.png" Stretch="Fill"/>
        
        <SolidColorBrush x:Key="Button.MouseOver.Border2" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Border2" Color="Transparent"/>
        <Style x:Key="ProfileBtnHover" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource profile_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource profile_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- #endregion -->


        <!-- Settings Image -->
        <!-- #region Settings Button Hover Effect -->
        <ImageBrush x:Key="settings_iconHov" ImageSource="Icons\Settings.png" Stretch="Fill"/>

        <SolidColorBrush x:Key="Button.MouseOver.Border3" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Border3" Color="Transparent"/>
        
        <Style x:Key="SettingsBtnHover" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource settings_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource settings_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- #endregion -->


        <!-- Edit Image -->
        <!-- #region Edit Button Hover Effect -->
        <ImageBrush x:Key="edit_iconHov" ImageSource="Icons\Edit.png" Stretch="Fill"/>

        <SolidColorBrush x:Key="Button.MouseOver.Border4" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Border4" Color="Transparent"/>

        <Style x:Key="EditBtnHover" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource edit_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource edit_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- #endregion -->


        <!-- Calendar Image -->
        <!-- #region Calendar Button Hover Effect -->
        <ImageBrush x:Key="calendar_iconHov" ImageSource="Icons\Calendar.png" Stretch="Fill"/>

        <SolidColorBrush x:Key="Button.MouseOver.Border5" Color="Transparent"/>
        <SolidColorBrush x:Key="Button.Pressed.Border5" Color="Transparent"/>

        <Style x:Key="CalendarBtnHover" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource calendar_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource calendar_iconHov}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- #endregion -->
        
        <!--#endregion-->

        <!--#endregion-->
        
    </Window.Resources>

    
    <!-- This is for the user controls -->
    <Window.DataContext>
        <viewModel:MainUserControl/>
    </Window.DataContext>


    <!-- Main Container -->
    <Grid>

        <!-- Main background colour -->
        <Grid Background="#FF1F1F1F">

            <!-- Main User View -->
            <Grid x:Name="WindowsParent" Margin="65,45,0,45">
                <ContentControl Content="{Binding CurrentView}"/>
            </Grid>

            <!-- Footer And Main Menu -->

            <!-- region Footer And Main Menu -->
            <DockPanel x:Name="DesktopDockPanel" Margin="65,0,0,0">
                <!-- Main Menu -->
                <StackPanel x:Name="MainMenuStackPanel" Background="#FF3C4FA6" DockPanel.Dock="Top" Height="45" VerticalAlignment="Top">
                    <Menu x:Name="MainMenu" Background="#FF3C4FA6" Foreground="White" FontSize="15" Margin="0" Height="45">
                        <MenuItem x:Name="CourseInformationMenuItem" Header="Course Information" Style="{DynamicResource MenuItemStyle1}" Height="45" Cursor="Hand" ToolTip="Go To The Course Information Page" Click="CourseInformationMenuItem_Click"/>
                        <MenuItem x:Name="SemesterInfoMenuItem" Header="Semester Information" Style="{DynamicResource MenuItemStyle1}" Height="45" Cursor="Hand" ToolTip="Go To The Semester Information Page" Click="SemesterInfoMenuItem_Click"/>
                        <MenuItem x:Name="AddModulesMenuItem" Header="Add Modules" Style="{DynamicResource MenuItemStyle1}" Height="45" Click="AddModulesMenuItem_Click" Cursor="Hand" ToolTip="Go To The Add Modules Page"/>
                        <MenuItem x:Name="RecordInformationMenuItem" Header="Record Information" Style="{DynamicResource MenuItemStyle1}" Height="45" Click="RecordInformationMenuItem_Click" Cursor="Hand" ToolTip="Go To The Record Information Page"/>
                    </Menu>
                </StackPanel>
                
                <!-- Footer -->
                <StackPanel DockPanel.Dock="Bottom" Height="45" VerticalAlignment="Bottom" Background="#FF5667D8"/>

            </DockPanel>
            <!-- #endregion -->
            

            <!-- Side Navigation -->

            <!--#region Side Navigation Bar -->
            <Grid x:Name="sideNavBarGrid" HorizontalAlignment="Left" Width="65" Background="#FF1F2432">
                <!-- The stackPanel -->
                <StackPanel x:Name="sideNavBarStackPanel">

                    <!-- A Grid Container for the Hamburger Button -->

                    <!-- #region Hamburger Button -->
                    <Grid Height="90">
                        <!-- Home Text -->
                        <TextBlock Grid.Row="1" Grid.Column="0" Margin="73, -20, 0, 0" Text="Menu" Foreground="White" FontSize="22" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource font_Style}">
                            <!-- Text Effect -->
                            <TextBlock.Effect>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="1" Direction="90" Color="White"></DropShadowEffect>
                            </TextBlock.Effect>
                        </TextBlock>

                        <!-- Hamburger Menu -->
                        <ToggleButton x:Name="HamburgerBtn" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="18, -20, 0, 0" Height="30" Width="30" BorderThickness="0" Style="{StaticResource tb_style}" Cursor="Hand">
                            <!-- The Hamburger Menu Icon/ Image -->
                            <ToggleButton.Background>
                                <ImageBrush ImageSource="D:\BCAD2\Semester 2\PROG 2B\POE\Task 1\GregPostings19002634PROG2BPOE_Task1\GregPostings19002634PROG2BPOE_Task1\Icons\HamburgerMenu.png" Stretch="None"></ImageBrush>
                            </ToggleButton.Background>

                            <!-- Click events -->
                            <!-- #region Hamburger Menu Click events -->
                            <ToggleButton.Triggers>
                                <!-- UnCheck event -->
                                <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                                    <BeginStoryboard>
                                        <Storyboard x:Name="HideSideNavBar">
                                            <!-- SideNavBar Animation -->
                                            <DoubleAnimation 
                                                Storyboard.TargetName="sideNavBarGrid" Storyboard.TargetProperty="Width"
                                                BeginTime="0:0:0" From="200" To="65" Duration="0:0:0.2">

                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>

                                <!-- Checked event-->
                                <EventTrigger RoutedEvent="ToggleButton.Checked">
                                    <BeginStoryboard>
                                        <Storyboard x:Name="ShowSideNavBar">
                                            <!-- SideNavBar Animation -->
                                            <DoubleAnimation 
                                                Storyboard.TargetName="sideNavBarGrid" Storyboard.TargetProperty="Width"
                                                BeginTime="0:0:0" From="65" To="200" Duration="0:0:0.3">

                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </ToggleButton.Triggers>
                            <!-- #endregion -->

                        </ToggleButton>
                    </Grid>
                    <!-- #endregion -->


                    <!-- List view with other menu items New -->
                    
                    <!--#region ListView With All The Menu Icons New -->

                    <ListView x:Name="sideNavBarLV" Background="Transparent" BorderBrush="Transparent" ScrollViewer.HorizontalScrollBarVisibility="Disabled">

                        <!-- Home -->
                        <!-- #region Home Button/ Icon -->
                        <ListViewItem HorizontalAlignment="Left" Margin="0, 0, 0, 15" MouseEnter="ListViewItem_MouseEnter">
                            <StackPanel x:Name="HomeIcon" Orientation="Horizontal" Width="230" Cursor="Hand">
                                <Button Margin="4,0,0,0" Height="45" Width="45" Command="{Binding HomeControlCommand}" BorderBrush="#00673AB7" Style="{DynamicResource HomeBtnHover}">
                                    <Button.Background>
                                        <ImageBrush ImageSource="Icons/Home.png"/>
                                    </Button.Background>
                                </Button>
                                <Button Command="{Binding HomeControlCommand}" Background="#00673AB7" BorderBrush="#00673AB7" Foreground="#00673AB7" Margin="0,0,0,0" Width="140" Height="45" HorizontalContentAlignment="Left" Padding="25,4,16,4">
                                    <Button.Content>
                                        <TextBlock Text="Home" Style="{StaticResource font_Style}"></TextBlock>
                                    </Button.Content>
                                </Button>
                            </StackPanel>

                            <!-- Tool Tip -->
                            <ListViewItem.ToolTip>
                                <ToolTip x:Name="tt_Home" Content="Home" Style="{StaticResource tt_Style}"/>
                            </ListViewItem.ToolTip>
                        </ListViewItem>
                        <!-- #endregion -->

                        <!-- Profile -->
                        <!-- #region Profile Button/ Icon -->
                        <ListViewItem HorizontalAlignment="Left" Margin="0, 0, 0, 15" MouseEnter="ListViewItem_MouseEnter">
                            <StackPanel x:Name="ProfileIcon" Orientation="Horizontal" Width="230" Cursor="Hand">
                                <Button Margin="4,0,0,0" Height="45" Width="45" Command="{Binding ProfileControlCommand}" BorderBrush="#00673AB7" Style="{DynamicResource ProfileBtnHover}">
                                    <Button.Background>
                                        <ImageBrush ImageSource="Icons/Profile.png"/>
                                    </Button.Background>
                                </Button>
                                <Button Command="{Binding ProfileControlCommand}" Background="#00673AB7" BorderBrush="#00673AB7" Foreground="#00673AB7" Margin="0,0,0,0" Width="140" Height="45" HorizontalContentAlignment="Left" Padding="25,4,16,4">
                                    <Button.Content>
                                        <TextBlock Text="Profile" Style="{StaticResource font_Style}"></TextBlock>
                                    </Button.Content>
                                </Button>
                            </StackPanel>

                            <!-- Tool Tip -->
                            <ListViewItem.ToolTip>
                                <ToolTip x:Name="tt_Profile" Content="Profile" Style="{StaticResource tt_Style}"/>
                            </ListViewItem.ToolTip>
                        </ListViewItem>
                        <!-- #endregion -->

                        <!-- Settings -->
                        <!-- #region Settings Button/ Icon -->
                        <ListViewItem HorizontalAlignment="Left" Margin="0, 0, 0, 15" MouseEnter="ListViewItem_MouseEnter">
                            <StackPanel x:Name="SettingsIcon" Orientation="Horizontal" Width="230" Cursor="Hand">
                                <Button Margin="4,0,0,0" Height="45" Width="45" Command="{Binding SettingsControlCommand}" BorderBrush="#00673AB7" Style="{DynamicResource SettingsBtnHover}">
                                    <Button.Background>
                                        <ImageBrush ImageSource="Icons/Settings.png"/>
                                    </Button.Background>
                                </Button>
                                <Button Command="{Binding SettingsControlCommand}" Background="#00673AB7" BorderBrush="#00673AB7" Foreground="#00673AB7" Margin="0,0,0,0" Width="140" Height="45" HorizontalContentAlignment="Left" Padding="25,4,16,4">
                                    <Button.Content>
                                        <TextBlock Text="Settings" Style="{StaticResource font_Style}"></TextBlock>
                                    </Button.Content>
                                </Button>
                            </StackPanel>

                            <!-- Tool Tip -->
                            <ListViewItem.ToolTip>
                                <ToolTip x:Name="tt_Settings" Content="Settings" Style="{StaticResource tt_Style}"/>
                            </ListViewItem.ToolTip>
                        </ListViewItem>
                        <!-- #endregion -->

                        <!-- Edit -->
                        <!-- #region Edit Button/ Icon -->
                        <ListViewItem HorizontalAlignment="Left" Margin="0, 0, 0, 15" MouseEnter="ListViewItem_MouseEnter">
                            <StackPanel x:Name="EditIcon" Orientation="Horizontal" Width="230" Cursor="Hand">
                                <Button Margin="4,0,0,0" Height="45" Width="45" Command="{Binding EditControlCommand}" BorderBrush="#00673AB7" Style="{DynamicResource EditBtnHover}">
                                    <Button.Background>
                                        <ImageBrush ImageSource="Icons/Edit.png"/>
                                    </Button.Background>
                                </Button>
                                <Button Command="{Binding EditControlCommand}" Background="#00673AB7" BorderBrush="#00673AB7" Foreground="#00673AB7" Margin="0,0,0,0" Width="140" Height="45" HorizontalContentAlignment="Left" Padding="25,4,16,4">
                                    <Button.Content>
                                        <TextBlock Text="Edit" Style="{StaticResource font_Style}"></TextBlock>
                                    </Button.Content>
                                </Button>
                            </StackPanel>

                            <!-- Tool Tip -->
                            <ListViewItem.ToolTip>
                                <ToolTip x:Name="tt_Edit" Content="Edit" Style="{StaticResource tt_Style}"/>
                            </ListViewItem.ToolTip>
                        </ListViewItem>
                        <!-- #endregion -->

                        <!-- Calendar -->
                        <!-- #region Calendar Button/ Icon -->
                        <ListViewItem HorizontalAlignment="Left" Margin="0, 0, 0, 15" MouseEnter="ListViewItem_MouseEnter">
                            <StackPanel x:Name="CalendarIcon" Orientation="Horizontal" Width="230" Cursor="Hand">
                                <Button Margin="4,0,0,0" Height="45" Width="45" Command="{Binding CalendarControlCommand}" BorderBrush="#00673AB7" Style="{DynamicResource CalendarBtnHover}">
                                    <Button.Background>
                                        <ImageBrush ImageSource="Icons/Calendar.png"/>
                                    </Button.Background>
                                </Button>
                                <Button Command="{Binding CalendarControlCommand}" Background="#00673AB7" BorderBrush="#00673AB7" Foreground="#00673AB7" Margin="0,0,0,0" Width="140" Height="45" HorizontalContentAlignment="Left" Padding="25,4,16,4">
                                    <Button.Content>
                                        <TextBlock Text="Calendar" Style="{StaticResource font_Style}"></TextBlock>
                                    </Button.Content>
                                </Button>
                            </StackPanel>

                            <!-- Tool Tip -->
                            <ListViewItem.ToolTip>
                                <ToolTip x:Name="tt_Calendar" Content="Calendar" Style="{StaticResource tt_Style}"/>
                            </ListViewItem.ToolTip>
                        </ListViewItem>
                        <!-- #endregion -->

                        <!-- Log Out -->
                        <!-- #region Log Out Button/ Icon -->
                        <ListViewItem HorizontalAlignment="Left" Margin="0, 0, 0, 15" MouseEnter="ListViewItem_MouseEnter">
                            <StackPanel x:Name="LogOutIcon" Orientation="Horizontal" Width="230" MouseUp="LogOutIcon_MouseUp" Cursor="Hand">
                                <Image Source="D:\BCAD2\Semester 2\PROG 2B\POE\Task 1\GregPostings19002634PROG2BPOE_Task1\GregPostings19002634PROG2BPOE_Task1\Icons\LogOut4.png" Stretch="None" Margin="1, 0, 0, 0"></Image>
                                <TextBlock Text="Log Out" Margin="25, 0, 0, 0" Style="{StaticResource font_Style}"/>
                            </StackPanel>

                            <!-- Tool Tip -->

                            <ListViewItem.ToolTip>
                                <ToolTip x:Name="tt_LogOut" Content="Log Out" Style="{StaticResource tt_Style}"/>
                            </ListViewItem.ToolTip>
                        </ListViewItem>

                        <!-- #endregion -->

                        <!-- List View Items Style -->
                        <!-- #region ListView Style -->

                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Border x:Name="Bd" Height="50" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="Bd" Value="#404D5B"/>
                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="#404D5B"/>
                                                </MultiTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.ItemContainerStyle>

                        <!-- #endregion -->

                    </ListView>
                    <!-- #endregion -->

                </StackPanel>
            </Grid>
            <!-- #endregion -->
            
        </Grid>
    </Grid>
</Window>
<!--/////////////////////////// END OF WINDOW ///////////////////////////-->